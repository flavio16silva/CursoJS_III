/*
Se o exerc√≠cio n√£o especificou nome do identificador (vari√°vel, 
par√¢metro, propriedade, fun√ß√£o), declare ele com o nome de sua 
prefer√™ncia. 

Quando um exerc√≠cio pedir para voc√™ criar uma fun√ß√£o, escolha 
a forma de declara√ß√£o de fun√ß√£o que voc√™ preferir.

Mas arrow function √© mais legal üòÅ
*/

/*
01

Crie uma fun√ß√£o que recebe dois par√¢metros e retorna o resultado 
da multiplica√ß√£o deles.
*/
const multiplicacao = (x, y) =>  x * y

multiplicacao(2, 2) //invocando a fun√ß√£o arrow
console.log(multiplicacao(2,2)) //retorno no console


/*
02

Declare um objeto e armazene-o em uma const.

O objeto deve ter uma propriedade armazenando 7 e outra 
armazenando 3.

Invoque a fun√ß√£o que voc√™ criou acima e passe como argumentos 
os n√∫meros do objeto. 

A invoca√ß√£o da fun√ß√£o deve retornar 21.
*/

const obj = {num1: 7, num2: 3}    //armazenando nas propriedades dos objetos. Qualquer express√£o ou valor pode ser inserido como argumento de fun√ß√£o. 

multiplicacao(obj.num1, obj.num2) //invocando a fun√ß√£o acima criada, passando como argumento.
console.log(multiplicacao(obj.num1, obj.num2))

/*
03

Declare um array e armazene-o em uma const.
O array deve ter os itens 5 e 7.

Invoque a fun√ß√£o que voc√™ criou no exerc√≠cio 01 e passe como 
argumentos os n√∫meros do array. 

A invoca√ß√£o da fun√ß√£o deve retornar 35.
*/
const numeros = [5, 7]
multiplicacao(numeros[0], numeros[1]) //passando o array acima
console.log(multiplicacao(numeros[0], numeros[1]))

/*
04

Crie uma fun√ß√£o pegaNumerosImpares que retorna um array com os 
n√∫meros 5, 3 e 9.

Invoque a fun√ß√£o que voc√™ criou no exerc√≠cio 01 e passe como 
argumentos os n√∫meros 3 e 9 do array. 

N√£o armazene os retornos da invoca√ß√£o de pegaNumerosImpares 
em consts.

A invoca√ß√£o da fun√ß√£o que voc√™ criou no exerc√≠cio 01 deve 
retornar 27.
*/

const pegaNumerosImpares = () => [5, 3, 9]

multiplicacao(pegaNumerosImpares()[1], pegaNumerosImpares()[2])
console.log(multiplicacao(pegaNumerosImpares()[1], pegaNumerosImpares()[2])) //invoca√ß√£o: pegaNumerosImpares()

/*
05

Crie uma fun√ß√£o pegaObj que retorna um array com 3 objetos. 

Cada objeto deve ter uma propriedade numero.

A propriedade numero do primeiro objeto deve armazenar 2.

A propriedade numero do segundo objeto deve armazenar 4.

E a propriedade numero do terceiro objeto deve armazenar 6.

Invoque a fun√ß√£o que voc√™ criou no exerc√≠cio 01 e passe como 
argumentos os n√∫meros 2 e 6 dos objetos. 

N√£o armazene os retornos da invoca√ß√£o de pegaObj em consts.

A invoca√ß√£o da fun√ß√£o que voc√™ criou no exerc√≠cio 01 deve 
retornar 12.
*/
const pegaObj = () => [
  {numero: 2},
  {numero: 4},
  {numero: 6},
]
multiplicacao(pegaObj()[0].numero, pegaObj()[2].numero)
console.log(pegaObj())
//pegaObj()[0].numero
console.log(multiplicacao(pegaObj()[0].numero, pegaObj()[2].numero))


/*
06

Crie uma fun√ß√£o pegaRespostasUsuario que retorna um array com os 
itens 'A', 'B', 'A' e 'D'.
*/
const pegaRespostasUsuario = () => ['A', 'B', 'A', 'D']
console.log(pegaRespostasUsuario())

/*
07

Crie uma fun√ß√£o pegaPontuacao que cont√©m um par√¢metro 
respostasUsuario.

Na primeira linha da fun√ß√£o, crie uma const que armazena o √∫ltimo 
item do array que voc√™ declarou no exerc√≠cio acima. Armazene o 
item usando o par√¢metro respostasUsuario e sintaxe de colchetes. 
N√£o invoque a fun√ß√£o que voc√™ criou no exerc√≠cio anterior. 

Abaixo da const, crie uma let pontuacao que recebe zero. 

Se a const que voc√™ declarou na primeira linha da fun√ß√£o √© igual 
a 'A', atribua a pontuacao o valor que ela tem somado a 50.

Sen√£o, se a const √© igual a 'C', atribua a pontuacao o valor que 
ela tem somado a 25.

Sen√£o, atribua a pontuacao o valor que ela tem somado a 100.

Na √∫ltima linha dentro do bloco da fun√ß√£o, retorne pontuacao.
*/
const pegaPontuacao = (respostasUsuario) => { //respostaUsuario pode receber qualquer valor. 
  const ultimaReposta = respostasUsuario[3]
  let pontuacao = 0
  // ['A', 'B', 'A', 'D']

  if (ultimaReposta === 'A'){
    pontuacao += 50                  // atribua a pontuacao o valor que ela tem somado a 50
  } else if (ultimaReposta === 'C') {
    pontuacao += 25                 // atribua a pontuacao o valor que ela tem somado a 25.
  } else {
    pontuacao += 100                //atribua a pontuacao o valor que ela tem somado a 100  //execu√ß√£o da fun√ß√£o para aqui apos trazer o resultado se for esse no if
  }

  return pontuacao                 //retorno da fun√ß√£o
}


/*
08

Crie uma const respostasUsuario que armazena o retorno da 
invoca√ß√£o de pegaRespostasUsuario.

Invoque pegaPontuacao e passe respostasUsuario como argumento.

A invoca√ß√£o de pegaPontuacao deve retornar 100.
*/
const respostasUsuario = pegaRespostasUsuario() //armazena o retorno da invoca√ß√£o de pegaRespostasUsuario.
pegaPontuacao(respostasUsuario)

console.log(pegaPontuacao(respostasUsuario))
//console.log(respostasUsuario)


/*
09

Fa√ßa o c√≥digo da fun√ß√£o pegaPontuacao ser imut√°vel. 

Isto √©, elimine da fun√ß√£o qualquer ocorr√™ncia de reatribui√ß√£o. 

Dicas: 

A palavra-chave return pode ser inserida dentro de bloco de if, 
else if ou else. 

O √∫nico requisito para voc√™ usar return √© ele estar dentro de uma 
fun√ß√£o.
*/


//Porque quando invoco 'pegaPontuacao', varias vezes n√£o existe colis√£o de pontuacao. Sendo que ela √© uma LET. ?
//Ainda que a fun√ß√£o seja invocada varias vezes, uma nova let pontuacao ser√° criada na memoria recebendo zero, toda vez que a fun√ß√£o √© invocada.

//Toda vez que esse bloco de fun√ß√£o √© executado, tudo que t√° dentro dele √© apagado da memoria

//ser imut√°vel
//ocorr√™ncia de reatribui√ß√£o

const pegaPontuacao1 = (respostasUsuario) => {
  const ultimaReposta = respostasUsuario[3]
  const pontuacao = 0
  //let pontuacao = 0
  // ['A', 'B', 'A', 'D']

  //Criando teste de valida√ß√£o para cada caso:

  if (ultimaReposta === 'A'){
    return 50                  
  } else if (ultimaReposta === 'C') {
    return 25                 
  } else if (ultimaReposta === 'B') {
    return 75
  } else if (ultimaReposta === 'D') {
    return 100
  } else {
    return 0
  }               
            
}

//Tecnica para reduzir os IFs e ELSEs
//Para isso d√° certo precisa do return (para parar a valida√ß√£o). Garantir que somente um dos blocos d√™ a resposta

const pegaPontuacao2 = (respostasUsuario) => {
  const ultimaReposta = 'respostasUsuario[3]' 
  //const pontuacao = 0
  //let pontuacao = 0
  // ['A', 'B', 'A', 'D']

  //Criando teste de valida√ß√£o para cada caso:

  if (ultimaReposta === 'A'){
    return 50                  
  } 
  
  if (ultimaReposta === 'C') {
    return 25 
  } 

  if (ultimaReposta === 'B') {
    return 75
  } 
  
  if (ultimaReposta === 'D') {
    return 100
  } 

    return 0

  }               
            



